#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Oct 25 00:15:22 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./install_aips.sh
match_max 100000
expect -exact "AipsWiz: ===> Press <ENTER> or <RETURN> to get started: "
send -- "\r"
expect -exact "AipsWiz: ===> What group should be used for AIPS? \[root\] "
send -- "spamgroup\r"
expect -exact "AipsWiz: ===> Allow spamgroup to have write access? \[YES\] "
send -- "\r"
expect -exact "AipsWiz: ===> Your site name: \[required, no default\] "
send -- "CANNEDSPAM\r"
expect -exact "AipsWiz: ===> If you want this, enter Y or y \[N\]"
send -- "Y\r"
expect -exact "AipsWiz: ===> Enter the architecture for this system \[LNX64\] "
send -- "\r"
expect -exact "AipsWiz: ===> Enter new hosts (no commas!) or LOCALHOST to reset:"
send -- "\r"
expect -exact "AipsWiz: ===> Data Areas: "
send -- "/build/spam/AIPS/DATA/LOCALHOST_1"
expect -exact "/build/spam/AIPS/DATA/LOCALHOST_1"
send -- "\r"
expect -exact "AipsWiz: ===> Your choice (default: Accept):"
send -- "\r"
expect -exact "AipsWiz: ==> Do your printer(s) use A or A4 paper? \[A\]: "
send -- "A4\r"
expect -exact "AipsWiz: ===> Your choice (default: Accept):"
send -- "\r"
expect -exact "AipsWiz: ===> Your choice (default: Accept):"
send -- "\r"
expect -exact "AipsWiz: ===> \[A\]ccept (default) or menu number:"
send -- "\r"
expect -exact "AipsWiz: ==> Confirm: start the install with these settings \[Y\]: "
send -- "\r"
expect -exact "CVS password: "
send -- "\r"
expect -exact "MAKE.BMNJ - Press <RETURN> when ready to proceed...: "
send -- "\r"
expect -exact "AipsWiz: ==> Press <ENTER> to acknowledge:: "
send -- "\r"
expect eof
